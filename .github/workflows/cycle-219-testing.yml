name: Testing Cycle 2.19 RC

on:
  #push:
  workflow_dispatch:
  schedule:
    - cron: "0 14 * * 1-5"   # Run M-F at 8AM EST (GHA is based on UTC)

jobs:

  scale-up-instance:
    runs-on: ubuntu-latest
    steps:
    
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Interact with the GitHub Actions scaleset
        run: |
          az vmss scale --resource-group "4664-ado-devprog-scaleset" --name "ado-devprog-scaleset" --new-capacity 1 >/dev/null 2>&1

  run-cycle-tests:
    needs: scale-up-instance
    runs-on: self-hosted
    timeout-minutes: 10  # Set the timeout to 10 minutes
    steps:
        
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
            
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      - run: echo "🖥️ This job is now running on a self-hosted Windows runner named ${{ runner.name	}} !"

      - name: Show Runner OS
        run: echo "The operating system of the runner is ${{ runner.os }}"
        
      - name: Show Runner Workspace
        run: echo "The workspace of the runner is ${{ runner.workspace }}"
      
      - name: Install Azure CLI if not installed
        run: |
          # Check if Azure CLI is installed
          if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
              Write-Host "Azure CLI not found. Installing..."
              Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
              Start-Process msiexec.exe -ArgumentList '/I AzureCLI.msi /quiet /norestart' -NoNewWindow -Wait
              Write-Host "Azure CLI installed successfully."
          } else {
              Write-Host "Azure CLI is already installed."
          }
        shell: powershell

      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Get specific secrets and set environment variables
        run: |
          $secret_names = @("PW-AZURESQL", "PW-DB2", "PW-MOCA", "PW-MYSQL", "PW-OPENSSH", "PW-ORACLE-DB", "PW-SQL-DB", "PW-SQL14-DB", "PW-TELNET")
          foreach ($secret in $secret_names) {
            $secret_value = az keyvault secret show --vault-name ${{ secrets.DEV_KV_NAME }} --name $secret --query "value" -o tsv
            # Mask the secret value in logs
            echo "::add-mask::$secret_value"
            echo "$secret=$secret_value" >> $Env:GITHUB_ENV
          }
        shell: powershell
        
      - name: List files in the repository
        run: Get-ChildItem -Path ${{ github.workspace }}
      
      - name: Get Cycle-CLI version
        run: cycle-cli.exe -v

      - name: Make an output directory to store .db files in
        run: |
          mkdir "${{ github.workspace }}\output"
        
      - name: Cycle CLI - Run API Test
        run: cycle-cli --clientid ${{ secrets.CI_CYCLE_AUTH }} --client-credential ${{ secrets.CI_CYCLE_AUTH_SECRET }} -p automated-regression-testing.cycproj -u cyclejenkinsuser.cycuser --skip-initial-purge --env-file ./config/.env --db-file-output-directory "${{ github.workspace }}\output" features/api-test-updated.feature
      
      - name: Cycle CLI - Run Browser Test
        run: cycle-cli --clientid ${{ secrets.CI_CYCLE_AUTH }} --client-credential ${{ secrets.CI_CYCLE_AUTH_SECRET }} -p automated-regression-testing.cycproj -u cyclejenkinsuser.cycuser --skip-initial-purge --env-file ./config/.env --db-file-output-directory "${{ github.workspace }}\output" features/grocer.feature
        
      - name: Cycle CLI - Run Java Test
        run: cycle-cli --clientid ${{ secrets.CI_CYCLE_AUTH }} --client-credential ${{ secrets.CI_CYCLE_AUTH_SECRET }} -p automated-regression-testing.cycproj -u cyclejenkinsuser.cycuser --skip-initial-purge --env-file ./config/.env --db-file-output-directory "${{ github.workspace }}\output" features/java-app-test.feature
        
      - name: Cycle CLI - Run Connection Test
        run: cycle-cli --clientid ${{ secrets.CI_CYCLE_AUTH }} --client-credential ${{ secrets.CI_CYCLE_AUTH_SECRET }} -p automated-regression-testing.cycproj -u cyclejenkinsuser.cycuser --skip-initial-purge --env-file ./config/.env --db-file-output-directory "${{ github.workspace }}\output" features/conf-file-cycle-connection-test.feature
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cycle-reports
          path: |
            C:\actions-runner\_work\cycle-gha-example\cycle-gha-example\featureReports\
            C:\actions-runner\_work\cycle-gha-example\cycle-gha-example\output\

      - name: Check output directory
        run: |
          cd C:\actions-runner\_work\cycle-gha-example\cycle-gha-example\output\
          dir
    
      - run: echo "🍏 This job's status is ${{ job.status }}."
  
  
  scale-down-instance:
    # This makes sure that the scale set instance is deallocated even if the Cycle test(s) fail.
    if: always()
    needs: run-cycle-tests
    runs-on: ubuntu-latest
    steps:
    
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Interact with the GitHub Actions scaleset
        run: |
          az vmss scale --resource-group "4664-ado-devprog-scaleset" --name "ado-devprog-scaleset" --new-capacity 0 >/dev/null 2>&1

      - name: Make sure the instance has been deallocated
        run: |
          az vmss list-instances --resource-group "4664-ado-devprog-scaleset" --name "ado-devprog-scaleset" --output table
